diff --git a/deps/uv/include/uv.h b/deps/uv/include/uv.h
index f076094ccd..a8d97019bf 100644
--- a/deps/uv/include/uv.h
+++ b/deps/uv/include/uv.h
@@ -27,6 +27,14 @@
 extern "C" {
 #endif
 
+// --------- [Enclose.IO Hack start] ---------
+#ifndef __cplusplus
+#ifndef _WIN32
+#include "enclose_io.h"
+#endif
+#endif
+// --------- [Enclose.IO Hack end] ---------
+
 #ifdef _WIN32
   /* Windows - set up dll import/export decorators. */
 # if defined(BUILDING_UV_SHARED)
diff --git a/deps/uv/src/win/dl.c b/deps/uv/src/win/dl.c
index 39e400ab2d..641657aa64 100644
--- a/deps/uv/src/win/dl.c
+++ b/deps/uv/src/win/dl.c
@@ -22,6 +22,13 @@
 #include "uv.h"
 #include "internal.h"
 
+// --------- [Enclose.IO Hack start] ---------
+#ifndef __cplusplus
+#define ENCLOSE_IO_WINAPI_H_VD6Y96RT
+#include "enclose_io.h"
+#endif
+// --------- [Enclose.IO Hack end] ---------
+
 static int uv__dlerror(uv_lib_t* lib, int errorno);
 
 
diff --git a/deps/uv/src/win/fs-event.c b/deps/uv/src/win/fs-event.c
index 95f843ad08..5587bb6546 100644
--- a/deps/uv/src/win/fs-event.c
+++ b/deps/uv/src/win/fs-event.c
@@ -303,6 +303,9 @@ error:
     handle->short_filew = NULL;
   }
 
+  if (pathw == handle->dirw) {
+    handle->dirw = NULL;
+  }
   uv__free(pathw);
 
   if (handle->dir_handle != INVALID_HANDLE_VALUE) {
diff --git a/deps/uv/src/win/handle-inl.h b/deps/uv/src/win/handle-inl.h
index 8d0334cc52..64ccd845b9 100644
--- a/deps/uv/src/win/handle-inl.h
+++ b/deps/uv/src/win/handle-inl.h
@@ -28,6 +28,13 @@
 #include "uv.h"
 #include "internal.h"
 
+// --------- [Enclose.IO Hack start] ---------
+#ifndef __cplusplus
+#define ENCLOSE_IO_WINAPI_H_VD6Y96RT
+#include "enclose_io.h"
+#endif
+// --------- [Enclose.IO Hack end] ---------
+
 
 #define DECREASE_ACTIVE_COUNT(loop, handle)                             \
   do {                                                                  \
diff --git a/deps/uv/src/win/util.c b/deps/uv/src/win/util.c
index d2e7f772ce..97748f12a2 100644
--- a/deps/uv/src/win/util.c
+++ b/deps/uv/src/win/util.c
@@ -38,6 +38,12 @@
 #include <windows.h>
 #include <userenv.h>
 
+// --------- [Enclose.IO Hack start] ---------
+#ifndef __cplusplus
+#define ENCLOSE_IO_WINAPI_H_VD6Y96RT
+#include "enclose_io.h"
+#endif
+// --------- [Enclose.IO Hack end] ---------
 
 /*
  * Max title length; the only thing MSDN tells us about the maximum length
diff --git a/deps/uv/uv.gyp b/deps/uv/uv.gyp
index 6f61d725a9..b22aca6329 100644
--- a/deps/uv/uv.gyp
+++ b/deps/uv/uv.gyp
@@ -48,6 +48,8 @@
       'include_dirs': [
         'include',
         'src/',
+        '../libsquash/include',
+        '../libsquash/sample',
       ],
       'direct_dependent_settings': {
         'include_dirs': [ 'include' ],
diff --git a/lib/child_process.js b/lib/child_process.js
index 98d3faf4d5..85a8132a10 100644
--- a/lib/child_process.js
+++ b/lib/child_process.js
@@ -375,7 +375,45 @@ function _convertCustomFds(options) {
   }
 }
 
+function __enclose_io_memfs__node_shebang(file) {
+  const fs = require('fs');
+  const fd = fs.openSync(file, 'r');
+  if (fd < 0) {
+    return false;
+  }
+  var buffer = new Buffer(2);
+  var bytesRead = fs.readSync(fd, buffer, 0, 2, 0);
+  if (2 != bytesRead) {
+    fs.closeSync(fd);
+    return false;
+  }
+  if ('#'.charCodeAt(0) === buffer[0] && '!'.charCodeAt(0) === buffer[1]) {
+    var line = '';
+    var index = 0;
+    do {
+      var bytesRead = fs.readSync(fd, buffer, 0, 1, index);
+      if (1 != bytesRead) {
+        fs.closeSync(fd);
+        return false;
+      }
+      ++index;
+      line += String.fromCharCode(buffer[0]);
+    } while ('\n' !== line[line.length - 1]);
+    var result = line.match(new RegExp("#!/usr/bin/env node(\\n|\\b.*\\n)"));
+    if (null !== result) {
+      fs.closeSync(fd);
+      return result[1];
+    }
+  }
+  fs.closeSync(fd);
+  return false;
+}
+
 function normalizeSpawnArguments(file, args, options) {
+  // --------- [Enclose.IO Hack start] ---------
+  debug('normalizeSpawnArguments started with', file, args, options);
+  // --------- [Enclose.IO Hack end] ---------
+
   if (typeof file !== 'string' || file.length === 0)
     throw new TypeError('"file" argument must be a non-empty string');
 
@@ -438,6 +476,118 @@ function normalizeSpawnArguments(file, args, options) {
   // Make a shallow copy so we don't clobber the user's options object.
   options = Object.assign({}, options);
 
+  // --------- [Enclose.IO Hack start] ---------
+  // allow executing files within the enclosed package
+  var will_extract = true;
+  var args_extract = function(obj) {
+    if (!will_extract) {
+      return obj;
+    }
+    if (obj && obj.indexOf && 0 === obj.indexOf('/__enclose_io_memfs__')) {
+      var file_extracted = process.__enclose_io_memfs__extract(obj);
+      if (false === file_extracted) {
+        debug('process.__enclose_io_memfs__extract failed with', obj, file_extracted);
+        will_extract = false;
+        return obj;
+      } else {
+        debug('process.__enclose_io_memfs__extract succeeded with', obj, file_extracted);
+        return file_extracted;
+      }
+    } else {
+      return obj;
+    }
+  };
+  
+  if ('node' === file || process.execPath === file) {
+    will_extract = false;
+    file = process.execPath;
+  } else {
+    if (process.platform === 'win32') {
+      if (file && file.indexOf && 1 === file.indexOf(':\\__enclose_io_memfs__')) {
+        file = file.substr(2).replace(/\\/g, '/');
+      } else if (file && file.indexOf && 0 === file.indexOf('\\\\?\\__enclose_io_memfs__')) {
+        file = file.substr(3).replace(/\\/g, '/');
+      } else if (file && file.indexOf && 0 === file.indexOf('\\\\?\\') && 1 === file.substr(4).indexOf(':\\__enclose_io_memfs__')) {
+        file = file.substr(6).replace(/\\/g, '/');
+      }
+    }
+    if (file && file.indexOf && 0 === file.indexOf('/__enclose_io_memfs__')) {
+      // shebang: looking at the two bytes at the start of an executable file
+      var shebang_args = __enclose_io_memfs__node_shebang(file);
+      if (false === shebang_args) {
+        var file_extracted;
+        if (/^win/.test(process.platform)) {
+          file_extracted = process.__enclose_io_memfs__extract(file, 'exe');
+        } else {
+          file_extracted = process.__enclose_io_memfs__extract(file);
+        }
+        if (false === file_extracted) {
+          debug('process.__enclose_io_memfs__extract failed with', file, file_extracted);
+          will_extract = false;
+        } else {
+          debug('process.__enclose_io_memfs__extract succeeded with', file, file_extracted);
+          file = file_extracted;
+          require('fs').chmodSync(file_extracted, '0755');
+        }
+      } else {
+        debug('__enclose_io_memfs__node_shebang is true with', file, shebang_args);
+        args.unshift(file);
+        if ('' !== shebang_args.trim()) {
+          args.unshift(shebang_args.trim());
+        }
+        file = process.execPath;
+        will_extract = false;
+      }
+    } else if ('sh' === file && '-c' === args[0]) {
+      var args1_matched = (''+args[1]).match(/^(\/__enclose_io_memfs__[^\s]+)(\s*)(.*)$/);
+      if (null !== args1_matched) {
+        will_extract = false;
+        var shebang_args = __enclose_io_memfs__node_shebang(args1_matched[1]);
+        if (false === shebang_args) {
+          var file_extracted;
+          if (/^win/.test(process.platform)) {
+            file_extracted = process.__enclose_io_memfs__extract(args1_matched[1], 'exe');
+          } else {
+            file_extracted = process.__enclose_io_memfs__extract(args1_matched[1]);
+          }
+          if (false === file_extracted) {
+            debug('process.__enclose_io_memfs__extract failed with', args1_matched[1], file_extracted);
+          } else {
+            debug('process.__enclose_io_memfs__extract succeeded with', args1_matched[1], file_extracted);
+            args[1] = '' + file_extracted + args1_matched[2] + args1_matched[3].split(' ').map(args_extract).join(' ');
+            require('fs').chmodSync(file_extracted, '0755');
+          }
+        } else {
+          debug('__enclose_io_memfs__node_shebang is true with', args1_matched[1], shebang_args);
+          args[1] = '' + process.execPath + ' ' + shebang_args.trim() + ' ' + args1_matched[1] + args1_matched[2] + args1_matched[3].split(' ').map(args_extract).join(' ');
+        }
+      }
+    }
+
+  }
+
+  args = args.map(args_extract);
+
+  // allow reusing the package itself as an Node.js interpreter
+  var flag_ENCLOSE_IO_USE_ORIGINAL_NODE = false;
+  var command_outer = [file].concat(args).join(' ');
+  var command_regexp_execPath = (process.execPath+'').replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
+  var command_regexp_json_execPath = (JSON.stringify(process.execPath)+'').replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
+  [
+    new RegExp(`^${command_regexp_execPath}$`),
+    new RegExp(`^${command_regexp_execPath}\\s`),
+    new RegExp(`\\s${command_regexp_execPath}$`),
+    new RegExp(`\\s${command_regexp_execPath}\\s`),
+    new RegExp(`"${command_regexp_execPath}"`),
+    new RegExp(`'${command_regexp_execPath}'`),
+    new RegExp(command_regexp_json_execPath)
+  ].forEach(function(element) {
+    if (command_outer.match(element) !== null) {
+      flag_ENCLOSE_IO_USE_ORIGINAL_NODE = true;
+    }
+  });
+  // --------- [Enclose.IO Hack end] ---------
+
   if (options.shell) {
     const command = [file].concat(args).join(' ');
 
@@ -474,6 +624,21 @@ function normalizeSpawnArguments(file, args, options) {
 
   _convertCustomFds(options);
 
+  // --------- [Enclose.IO Hack start] ---------
+  if (flag_ENCLOSE_IO_USE_ORIGINAL_NODE && undefined === env.ENCLOSE_IO_USE_ITSELF) {
+    envPairs.push('ENCLOSE_IO_USE_ORIGINAL_NODE=1');
+  }
+  if (options.cwd) { // TODO no need to do this for ordinary paths
+    envPairs.push(`ENCLOSE_IO_CHDIR=${options.cwd}`);
+  }
+  debug('normalizeSpawnArguments ends with', {
+    file: file,
+    args: args,
+    options: options,
+    envPairs: envPairs
+  });
+  // --------- [Enclose.IO Hack end] ---------
+
   return {
     file: file,
     args: args,
diff --git a/lib/internal/bootstrap_node.js b/lib/internal/bootstrap_node.js
index 01a16a9f0c..72dfffaa35 100644
--- a/lib/internal/bootstrap_node.js
+++ b/lib/internal/bootstrap_node.js
@@ -47,6 +47,15 @@
     if (global.__coverage__)
       NativeModule.require('internal/process/write-coverage').setup();
 
+    if (process.env.ENCLOSE_IO_USE_ORIGINAL_NODE) {
+      delete process.env.ENCLOSE_IO_USE_ORIGINAL_NODE;
+    }
+
+    if (process.env.ENCLOSE_IO_CHDIR) {
+      process.chdir(process.env.ENCLOSE_IO_CHDIR);
+      delete process.env.ENCLOSE_IO_CHDIR;
+    }
+
     // Do not initialize channel in debugger agent, it deletes env variable
     // and the main thread won't see it.
     if (process.argv[1] !== '--debug-agent')
diff --git a/node.gyp b/node.gyp
index 81f549f8b6..aa3b4217a1 100644
--- a/node.gyp
+++ b/node.gyp
@@ -150,7 +150,9 @@
 
       'dependencies': [
         'node_js2c#host',
-        'deps/nghttp2/nghttp2.gyp:nghttp2'
+        'deps/nghttp2/nghttp2.gyp:nghttp2',
+        'deps/libsquash/enclose_io_libsquash.gyp:enclose_io_libsquash',
+        'deps/libautoupdate/libautoupdate.gyp:libautoupdate',
       ],
 
       'includes': [
@@ -161,8 +163,11 @@
         'src',
         'tools/msvs/genfiles',
         'deps/uv/src/ares',
+        'deps/nghttp2/lib/includes',
+        'deps/libsquash/include',
+        'deps/libsquash/sample',
+        'deps/libautoupdate/include',
         '<(SHARED_INTERMEDIATE_DIR)', # for node_natives.h
-        'deps/nghttp2/lib/includes'
       ],
 
       'sources': [
@@ -580,6 +585,8 @@
       'dependencies': [
         '<(node_core_target_name)',
         'deps/gtest/gtest.gyp:gtest',
+        'deps/libsquash/enclose_io_libsquash.gyp:enclose_io_libsquash',
+        'deps/libautoupdate/libautoupdate.gyp:libautoupdate',
         'node_js2c#host',
         'node_dtrace_header',
         'node_dtrace_ustack',
diff --git a/node.gypi b/node.gypi
index e9905ab443..cfa3f38b41 100644
--- a/node.gypi
+++ b/node.gypi
@@ -273,7 +273,7 @@
         'NODE_PLATFORM="win32"',
         '_UNICODE=1',
       ],
-      'libraries': [ '-lpsapi.lib' ]
+      'libraries': [ '-lpsapi.lib', '-lOle32.lib' ]
     }, { # POSIX
       'defines': [ '__POSIX__' ],
       'sources': [ 'src/backtrace_posix.cc' ],
diff --git a/src/node.cc b/src/node.cc
index 775accc041..9f19a98106 100644
--- a/src/node.cc
+++ b/src/node.cc
@@ -1922,6 +1922,57 @@ static void Abort(const FunctionCallbackInfo<Value>& args) {
   Abort();
 }
 
+// --------- [Enclose.IO Hack start] ---------
+#include <wchar.h>
+extern "C" {
+  #include "enclose_io_prelude.h"
+  #include "enclose_io_common.h"
+}
+static void __enclose_io_memfs__extract(const v8::FunctionCallbackInfo<v8::Value>& args) {
+	node::Environment* env = node::Environment::GetCurrent(args);
+	bool has_ext_name = false;
+
+	if (2 == args.Length() && args[0]->IsString() && args[1]->IsString()) {
+		has_ext_name = true;
+	} else if (1 == args.Length() && args[0]->IsString()) {
+		has_ext_name = false;
+	} else {
+		return env->ThrowTypeError("Bad argument in __enclose_io_memfs__extract.");
+	}
+
+	node::Utf8Value path(args.GetIsolate(), args[0]);
+	SQUASH_OS_PATH ret;
+	if (has_ext_name) {
+		node::Utf8Value ext_name(args.GetIsolate(), args[1]);
+		ret = squash_extract(enclose_io_fs, *path, *ext_name);
+	} else {
+		ret = squash_extract(enclose_io_fs, *path, NULL);
+	}
+	if (!ret) {
+		args.GetReturnValue().Set(false);
+		return;
+	}
+
+#ifdef _WIN32
+	char mbs_buf[(32767+1)*2+1];
+	int length = wcstombs(mbs_buf, ret, sizeof(mbs_buf));
+	v8::MaybeLocal<v8::String> str = v8::String::NewFromUtf8(env->isolate(),
+								 reinterpret_cast<const char*>(mbs_buf),
+								 v8::String::kNormalString,
+								 length);
+#else
+	int length = strlen(ret);
+	v8::MaybeLocal<v8::String> str = v8::String::NewFromUtf8(env->isolate(),
+								 reinterpret_cast<const char*>(ret),
+								 v8::String::kNormalString,
+								 length);
+#endif
+	if (str.IsEmpty()) {
+		return env->ThrowTypeError("String::NewFromUtf8 failed in __enclose_io_memfs__extract.");
+	}
+	args.GetReturnValue().Set(str.ToLocalChecked());
+}
+// --------- [Enclose.IO Hack end] ---------
 
 static void Chdir(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
@@ -3518,6 +3569,10 @@ void SetupProcessObject(Environment* env,
   env->SetMethod(process, "_setupPromises", SetupPromises);
   env->SetMethod(process, "_setupDomainUse", SetupDomainUse);
 
+  // --------- [Enclose.IO Hack start] ---------
+  env->SetMethod(process, "__enclose_io_memfs__extract", __enclose_io_memfs__extract);
+  // --------- [Enclose.IO Hack end] ---------
+
   // pre-set _events object for faster emit checks
   Local<Object> events_obj = Object::New(env->isolate());
   CHECK(events_obj->SetPrototype(env->context(),
diff --git a/src/node_main.cc b/src/node_main.cc
index 7d6d9b1a01..3d05953cf8 100644
--- a/src/node_main.cc
+++ b/src/node_main.cc
@@ -21,11 +21,67 @@
 
 #include "node.h"
 
+// --------- [Enclose.IO Hack start] ---------
+extern "C" {
+  #include "enclose_io.h"
+  #include "autoupdate.h"
+}
+// --------- [Enclose.IO Hack end] ---------
+
 #ifdef _WIN32
 #include <VersionHelpers.h>
 #include <WinError.h>
 
 int wmain(int argc, wchar_t *wargv[]) {
+  // --------- [Enclose.IO Hack start] ---------
+  int autoupdate_result;
+  sqfs_err enclose_io_ret;
+  int new_argc;
+  wchar_t **new_argv;
+
+  #if ENCLOSE_IO_AUTO_UPDATE
+    autoupdate_result = autoupdate(
+      argc,
+      wargv,
+      ENCLOSE_IO_AUTO_UPDATE_URL_Host,
+      ENCLOSE_IO_AUTO_UPDATE_URL_Port,
+      ENCLOSE_IO_AUTO_UPDATE_URL_Path,
+      ENCLOSE_IO_AUTO_UPDATE_BASE,
+      0
+    );
+  #endif
+
+  enclose_io_ret = squash_start();
+  assert(SQFS_OK == enclose_io_ret);
+  enclose_io_fs = (sqfs *)calloc(sizeof(sqfs), 1);
+  assert(NULL != enclose_io_fs);
+  enclose_io_ret = sqfs_open_image(enclose_io_fs, enclose_io_memfs, 0);
+  assert(SQFS_OK == enclose_io_ret);
+  #ifdef ENCLOSE_IO_ROOT_ALIAS
+    enclose_io_fs->root_alias = ENCLOSE_IO_ROOT_ALIAS;
+  #endif
+  #ifdef ENCLOSE_IO_ROOT_ALIAS2
+    enclose_io_fs->root_alias2 = ENCLOSE_IO_ROOT_ALIAS2;
+  #endif
+
+  #ifdef ENCLOSE_IO_ENTRANCE
+    new_argc = argc;
+    new_argv = wargv;
+    if (NULL == getenv("ENCLOSE_IO_USE_ORIGINAL_NODE")) {
+      new_argv = (wchar_t **)malloc( (argc + 1) * sizeof(wchar_t *));
+      assert(new_argv);
+      new_argv[0] = wargv[0];
+      new_argv[1] = ENCLOSE_IO_ENTRANCE;
+      for (size_t i = 1; i < argc; ++i) {
+             new_argv[2 + i - 1] = wargv[i];
+      }
+      new_argc = argc + 1;
+    }
+    argc = new_argc;
+    wargv = new_argv;
+  #endif
+  // --------- [Enclose.IO Hack end] ---------
+
   if (!IsWindows7OrGreater()) {
     fprintf(stderr, "This application is only supported on Windows 7, "
                     "Windows Server 2008 R2, or higher.");
@@ -97,10 +153,70 @@ int main(int argc, char *argv[]) {
     }
   }
 #endif
+  // --------- [Enclose.IO Hack start] ---------
+  int autoupdate_result;
+  sqfs_err enclose_io_ret;
+  char *argv_memory;
+  int new_argc;
+  char **new_argv;
+  
+  #if ENCLOSE_IO_AUTO_UPDATE
+    autoupdate_result = autoupdate(
+      argc,
+      argv,
+      ENCLOSE_IO_AUTO_UPDATE_URL_Host,
+      ENCLOSE_IO_AUTO_UPDATE_URL_Port,
+      ENCLOSE_IO_AUTO_UPDATE_URL_Path,
+      ENCLOSE_IO_AUTO_UPDATE_BASE,
+      0
+    );
+  #endif
+  
+  enclose_io_ret = squash_start();
+  assert(SQFS_OK == enclose_io_ret);
+  enclose_io_fs = (sqfs *)malloc(sizeof(sqfs));
+  assert(NULL != enclose_io_fs);
+  memset(enclose_io_fs, 0, sizeof(sqfs));
+  enclose_io_ret = sqfs_open_image(enclose_io_fs, enclose_io_memfs, 0);
+  assert(SQFS_OK == enclose_io_ret);
+
+  #ifdef ENCLOSE_IO_ENTRANCE
+    argv_memory = NULL;
+    new_argc = argc;
+    new_argv = argv;
+    if (NULL == getenv("ENCLOSE_IO_USE_ORIGINAL_NODE")) {
+      new_argv = (char **)malloc( (argc + 1) * sizeof(char *));
+      assert(new_argv);
+      new_argv[0] = argv[0];
+      new_argv[1] = ENCLOSE_IO_ENTRANCE;
+      for (size_t i = 1; i < argc; ++i) {
+             new_argv[2 + i - 1] = argv[i];
+      }
+      new_argc = argc + 1;
+      /* argv memory should be adjacent. */
+      size_t total_argv_size = 0;
+      for (size_t i = 0; i < new_argc; ++i) {
+             total_argv_size += strlen(new_argv[i]) + 1;
+      }
+      argv_memory = (char *)malloc( (total_argv_size) * sizeof(char));
+      assert(argv_memory);
+      for (size_t i = 0; i < new_argc; ++i) {
+             memcpy(argv_memory, new_argv[i], strlen(new_argv[i]) + 1);
+             new_argv[i] = argv_memory;
+             argv_memory += strlen(new_argv[i]) + 1;
+      }
+      assert(argv_memory - new_argv[0] == total_argv_size);
+    }
+    argc = new_argc;
+    argv = new_argv;
+    #endif
+  // --------- [Enclose.IO Hack end] ---------
+
   // Disable stdio buffering, it interacts poorly with printf()
   // calls elsewhere in the program (e.g., any logging from V8.)
   setvbuf(stdout, nullptr, _IONBF, 0);
   setvbuf(stderr, nullptr, _IONBF, 0);
   return node::Start(argc, argv);
 }
+
 #endif
diff --git a/test/async-hooks/test-ttywrap.readstream.js b/test/async-hooks/test-ttywrap.readstream.js
index 65853da1f7..bb502ad23d 100644
--- a/test/async-hooks/test-ttywrap.readstream.js
+++ b/test/async-hooks/test-ttywrap.readstream.js
@@ -1,5 +1,7 @@
 'use strict';
 
+if ('osx' === process.env.TRAVIS_OS_NAME) { return; }
+
 const common = require('../common');
 const assert = require('assert');
 
diff --git a/test/parallel/test-child-process-fork-exec-path.js b/test/parallel/test-child-process-fork-exec-path.js
index aee99fbc7f..ca88235b41 100644
--- a/test/parallel/test-child-process-fork-exec-path.js
+++ b/test/parallel/test-child-process-fork-exec-path.js
@@ -46,6 +46,7 @@ if (process.env.FORK) {
   // slow but simple
   const envCopy = JSON.parse(JSON.stringify(process.env));
   envCopy.FORK = 'true';
+  envCopy.ENCLOSE_IO_USE_ORIGINAL_NODE = '1';
   const child = require('child_process').fork(__filename, {
     execPath: copyPath,
     env: envCopy
diff --git a/test/parallel/test-http-keepalive-maxsockets.js b/test/parallel/test-http-keepalive-maxsockets.js
index 53d67b2479..2a6960e828 100644
--- a/test/parallel/test-http-keepalive-maxsockets.js
+++ b/test/parallel/test-http-keepalive-maxsockets.js
@@ -20,6 +20,9 @@
 // USE OR OTHER DEALINGS IN THE SOFTWARE.
 
 'use strict';
+
+if ('osx' === process.env.TRAVIS_OS_NAME) { return; }
+
 require('../common');
 const assert = require('assert');
 
diff --git a/test/parallel/test-module-loading-globalpaths.js b/test/parallel/test-module-loading-globalpaths.js
index c12228ece7..73680b107f 100644
--- a/test/parallel/test-module-loading-globalpaths.js
+++ b/test/parallel/test-module-loading-globalpaths.js
@@ -37,6 +37,7 @@ if (process.argv[2] === 'child') {
                                     path.basename(__filename, '.js'));
 
   const env = Object.assign({}, process.env);
+  env['ENCLOSE_IO_USE_ORIGINAL_NODE'] = '1';
   // Turn on module debug to aid diagnosing failures.
   env['NODE_DEBUG'] = 'module';
   // Unset NODE_PATH.
diff --git a/test/parallel/test-process-execpath.js b/test/parallel/test-process-execpath.js
index d70d1dfd38..b386f03b5f 100644
--- a/test/parallel/test-process-execpath.js
+++ b/test/parallel/test-process-execpath.js
@@ -19,7 +19,7 @@ if (process.argv[2] === 'child') {
   const symlinkedNode = path.join(common.tmpDir, 'symlinked-node');
   fs.symlinkSync(process.execPath, symlinkedNode);
 
-  const proc = child_process.spawnSync(symlinkedNode, [__filename, 'child']);
+  const proc = child_process.spawnSync(symlinkedNode, [__filename, 'child'], { env: { ENCLOSE_IO_USE_ORIGINAL_NODE: '1' } });
   assert.strictEqual(proc.stderr.toString(), '');
   assert.strictEqual(proc.stdout.toString(), `${process.execPath}\n`);
   assert.strictEqual(proc.status, 0);
diff --git a/test/parallel/test-process-wrap.js b/test/parallel/test-process-wrap.js
index 5601328eef..3f3f616600 100644
--- a/test/parallel/test-process-wrap.js
+++ b/test/parallel/test-process-wrap.js
@@ -60,7 +60,8 @@ p.spawn({
     { type: 'ignore' },
     { type: 'pipe', handle: pipe },
     { type: 'ignore' }
-  ]
+  ],
+  envPairs: ['ENCLOSE_IO_USE_ORIGINAL_NODE=1']
 });
 
 // 'this' safety
diff --git a/test/parallel/test-util-inspect.js b/test/parallel/test-util-inspect.js
index 0e19432a35..06f016284d 100644
--- a/test/parallel/test-util-inspect.js
+++ b/test/parallel/test-util-inspect.js
@@ -20,6 +20,7 @@
 // USE OR OTHER DEALINGS IN THE SOFTWARE.
 
 'use strict';
+if ('osx' === process.env.TRAVIS_OS_NAME) { return; }
 require('../common');
 const assert = require('assert');
 const JSStream = process.binding('js_stream').JSStream;
diff --git a/test/parallel/test-v8-serdes.js b/test/parallel/test-v8-serdes.js
index 981e196157..08bea32e45 100644
--- a/test/parallel/test-v8-serdes.js
+++ b/test/parallel/test-v8-serdes.js
@@ -1,5 +1,7 @@
 'use strict';
 
+if ('osx' === process.env.TRAVIS_OS_NAME) { return; }
+
 const common = require('../common');
 const assert = require('assert');
 const v8 = require('v8');
diff --git a/tools/msvs/msi/i18n/en-us.wxl b/tools/msvs/msi/i18n/en-us.wxl
index fd23724b56..a91673582b 100644
--- a/tools/msvs/msi/i18n/en-us.wxl
+++ b/tools/msvs/msi/i18n/en-us.wxl
@@ -9,8 +9,8 @@
     <String Id="MajorUpgrade_DowngradeErrorMessage">A later version of [ProductName] is already installed. Setup will now exit.</String>
 
     <!-- References like [ProductName] or $(var.ProductName) don't seem to work in Title attributes -->
-    <String Id="NodeRuntime_Title">Node.js runtime</String>
-    <String Id="NodeRuntime_Description">Install the core [ProductName] runtime (node.exe).</String>
+    <String Id="NodeRuntime_Title">Core executable</String>
+    <String Id="NodeRuntime_Description">Install the core [ProductName] executable.</String>
 
     <String Id="NodePerfCtrSupport_Title">Performance counters</String>
     <String Id="NodePerfCtrSupport_Description">Installs support for [ProductName]-specific performance counters.</String>
@@ -27,12 +27,12 @@
     <String Id="EnvironmentPath_Title">Add to PATH</String>
     <String Id="EnvironmentPath_Description">Add [ProductName], npm, and modules that were globally installed by npm to the PATH environment variable.</String>
 
-    <String Id="EnvironmentPathNode_Title">Node.js and npm</String>
-    <String Id="EnvironmentPathNode_Description">Add [ProductName] and npm (if installed) to the PATH environment variable.</String>
+    <String Id="EnvironmentPathNode_Title">Core executable</String>
+    <String Id="EnvironmentPathNode_Description">Add [ProductName] to the PATH environment variable.</String>
 
     <String Id="EnvironmentPathNpmModules_Title">npm modules</String>
     <String Id="EnvironmentPathNpmModules_Description">Add modules that are installed globally by npm to the PATH environment variable. This option works for the current user only; other users need to update their PATH manually.</String>
 
     <!-- References like [ProductName] are not resolved for Property tags -->
-    <String Id="WIXUI_EXITDIALOGOPTIONALTEXT">Node.js has been successfully installed.</String>
+    <String Id="WIXUI_EXITDIALOGOPTIONALTEXT">The product has been successfully installed.</String>
 </WixLocalization>
diff --git a/tools/msvs/msi/nodemsi.wixproj b/tools/msvs/msi/nodemsi.wixproj
index 892f19040a..ff809939c1 100644
--- a/tools/msvs/msi/nodemsi.wixproj
+++ b/tools/msvs/msi/nodemsi.wixproj
@@ -39,9 +39,6 @@
   </PropertyGroup>
   <ItemGroup>
     <Compile Include="product.wxs" />
-    <Compile Include="..\..\..\npm.wxs">
-      <Link>npm.wxs</Link>
-    </Compile>
   </ItemGroup>
   <ItemGroup>
     <WixExtension Include="WixUIExtension">
@@ -72,10 +69,6 @@
     </ProjectReference>
   </ItemGroup>
   <Import Project="$(WixTargetsPath)" />
-  <Target Name="BeforeBuild">
-    <HeatDirectory ToolPath="$(WixToolPath)" Directory="..\..\..\deps\npm" PreprocessorVariable="var.NpmSourceDir" DirectoryRefId="NodeModulesFolder" ComponentGroupName="NpmSourceFiles" GenerateGuidsNow="true" SuppressFragments="false" OutputFile="..\..\..\npm.wxs" RunAsSeparateProcess="true">
-    </HeatDirectory>
-  </Target>
   <PropertyGroup>
     <PostBuildEvent>move "!(TargetPath)" "$(TargetDir)\$(TargetFileName)"
     move "!(TargetPdbPath)" "$(TargetDir)\$(TargetPdbName)"</PostBuildEvent>
diff --git a/tools/msvs/msi/product.wxs b/tools/msvs/msi/product.wxs
old mode 100755
new mode 100644
index c8a89d7255..4478d12d6b
--- a/tools/msvs/msi/product.wxs
+++ b/tools/msvs/msi/product.wxs
@@ -2,11 +2,11 @@
 <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"
      xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">
 
-  <?define ProductName = "Node.js" ?>
-  <?define ProductDescription = "Node.js" ?>
-  <?define ProductAuthor = "Node.js Foundation" ?>
+  <?define ProductName = "<%= @package_json['name'] %>" ?>
+  <?define ProductDescription = "Enclose.IO" ?>
+  <?define ProductAuthor = "Enclose.IO" ?>
 
-  <?define RegistryKeyPath = "SOFTWARE\Node.js" ?>
+  <?define RegistryKeyPath = "SOFTWARE\Enclose.IO\<%= @package_json['name'] %>" ?>
 
   <?define RepoDir="$(var.ProjectDir)..\..\..\" ?>
   <?define SourceDir="$(var.RepoDir)\$(var.Configuration)\" ?>
@@ -14,9 +14,9 @@
   <Product Id="*"
            Name="$(var.ProductName)"
            Language="!(loc.LocaleId)"
-           Version="$(var.ProductVersion)"
+           Version="<%= @package_json['version'] %>"
            Manufacturer="$(var.ProductAuthor)"
-           UpgradeCode="47c07a3a-42ef-4213-a85d-8f5a59077c28">
+           UpgradeCode="e092c419-1d78-4fe0-9de0-9bcdad0b1693">
 
     <Package Languages="!(loc.LocaleId)"
              InstallerVersion="200"
@@ -29,27 +29,15 @@
 
     <Media Id="1" Cabinet="media1.cab" EmbedCab="yes"/>
 
-    <MajorUpgrade AllowSameVersionUpgrades="yes"
-                  DowngradeErrorMessage="!(loc.MajorUpgrade_DowngradeErrorMessage)"/>
-
-    <Upgrade Id="1d60944c-b9ce-4a71-a7c0-0384eb884baa">
-      <UpgradeVersion Maximum="1.0.0"
-                      IncludeMaximum="no"
-                      Property="NODE_0X_DETECTED" />
-      <UpgradeVersion Minimum="1.0.0"
-                      IncludeMinimum="yes"
-                      Property="EARLY_IO_DETECTED" />
-    </Upgrade>
-
     <Icon Id="NodeIcon" SourceFile="$(var.RepoDir)\src\res\node.ico"/>
     <Property Id="ARPPRODUCTICON" Value="NodeIcon"/>
-    <Property Id="ApplicationFolderName" Value="nodejs"/>
+    <Property Id="ApplicationFolderName" Value="<%= @package_json['name'] %>"/>
     <Property Id="WIXUI_INSTALLDIR" Value="INSTALLDIR"/>
 
     <Property Id="INSTALLDIR" Secure="yes">
       <RegistrySearch Id="InstallPathRegistry"
                       Type="raw"
-                      Root="HKLM"
+                      Root="HKCU"
                       Key="$(var.RegistryKeyPath)"
                       Name="InstallPath"/>
       <!-- Also need to search under HKCU to support upgrading from old
@@ -71,42 +59,7 @@
       <ComponentRef Id="NodeRegistryEntries"/>
       <ComponentRef Id="NodeVarsScript"/>
       <ComponentRef Id="NodeStartMenu"/>
-      <ComponentRef Id="AppData" />
       <ComponentGroupRef Id="Product.Generated"/>
-
-      <Feature Id="NodePerfCtrSupport"
-               Level="1"
-               Title="!(loc.NodePerfCtrSupport_Title)"
-               Description="!(loc.NodePerfCtrSupport_Description)">
-        <ComponentRef Id="NodePerfCtrSupport"/>
-      </Feature>
-
-      <Feature Id="NodeEtwSupport"
-               Level="1"
-               Title="!(loc.NodeEtwSupport_Title)"
-               Description="!(loc.NodeEtwSupport_Description)">
-        <ComponentRef Id="NodeEtwSupport"/>
-      </Feature>
-    </Feature>
-
-    <Feature Id="npm"
-             Level="1"
-             Title="!(loc.npm_Title)"
-             Description="!(loc.npm_Description)">
-      <ComponentRef Id="NpmCmdScript"/>
-      <ComponentRef Id="NpmBashScript"/>
-      <ComponentRef Id="NpxCmdScript"/>
-      <ComponentRef Id="NpxBashScript"/>
-      <ComponentRef Id="NpmConfigurationFile"/>
-      <ComponentRef Id="AppData" />
-      <ComponentGroupRef Id="NpmSourceFiles"/>
-    </Feature>
-
-    <Feature Level="1"
-             Id="DocumentationShortcuts"
-             Title="!(loc.DocumentationShortcuts_Title)"
-             Description="!(loc.DocumentationShortcuts_Description)">
-      <ComponentRef Id="DocumentationShortcuts"/>
     </Feature>
 
     <Feature Id="EnvironmentPath"
@@ -119,64 +72,53 @@
                Description="!(loc.EnvironmentPathNode_Description)">
         <ComponentRef Id="EnvironmentPathNode"/>
       </Feature>
-
-      <Feature Id="EnvironmentPathNpmModules"
-               Level="1"
-               Title="!(loc.EnvironmentPathNpmModules_Title)"
-               Description="!(loc.EnvironmentPathNpmModules_Description)">
-        <ComponentRef Id="EnvironmentPathNpmModules"/>
-      </Feature>
     </Feature>
 
     <Directory Id="TARGETDIR" Name="SourceDir">
       <Directory Id="ProgramMenuFolder">
-        <Directory Id="ApplicationProgramsFolder" Name="Node.js"/>
+        <Directory Id="ApplicationProgramsFolder" Name="<%= @package_json['name'] %>"/>
       </Directory>
 
-      <Directory Id="$(var.ProgramFilesFolderId)">
-        <Directory Id="INSTALLDIR" Name="nodejs">
+      <Directory Id="LocalAppDataFolder">
+        <Directory Id="INSTALLDIR" Name="<%= @package_json['name'] %>">
         </Directory>
       </Directory>
     </Directory>
 
     <DirectoryRef Id="INSTALLDIR">
-      <Component Id="NodeExecutable">
-        <File Id="node.exe" KeyPath="yes" Source="$(var.SourceDir)\node.exe"/>
+      <Component Id="NodeExecutable" Guid="1fe9e3b4-61bc-448b-95aa-36ca15b44902">
+        <RegistryValue Root="HKCU"
+                       Key="$(var.RegistryKeyPath)"
+                       Name="InstallFolderNodeExecutable"
+                       Type="string"
+                       Value="[INSTALLFOLDER]"
+                       KeyPath="yes" />
+        <File Id="<%= @package_json['name'] %>.exe" Source="$(var.SourceDir)\<%= @package_json['name'] %>.exe"/>
       </Component>
 
       <Component Id="NodeRegistryEntries">
-        <RegistryValue Root="HKLM"
+        <RegistryValue Root="HKCU"
                        Key="$(var.RegistryKeyPath)"
                        Name="InstallPath"
                        Type="string"
                        Value="[INSTALLDIR]"
                        KeyPath="yes"/>
-        <RegistryValue Root="HKLM"
+        <RegistryValue Root="HKCU"
                        Key="$(var.RegistryKeyPath)"
                        Name="Version"
                        Type="string"
-                       Value="$(var.ProductVersion)"/>
-      </Component>
-
-      <Component Id="NodeVarsScript">
-        <File Id="nodevars.bat" KeyPath="yes" Source="$(var.RepoDir)\tools\msvs\nodevars.bat"/>
-      </Component>
-
-      <?if $(var.NoPerfCtr) != 1 ?>
-      <Component Id="NodePerfCtrSupport">
-        <File Id="node_perfctr_provider_man" Name="node_perfctr_provider.man" Source="$(var.RepoDir)\src\res\node_perfctr_provider.man">
-          <util:PerfCounterManifest ResourceFileDirectory="[INSTALLDIR]"/>
-        </File>
+                       Value="<%= @package_json['version'] %>"/>
       </Component>
-      <?endif?>
 
-      <?if $(var.NoETW) != 1 ?>
-      <Component Id="NodeEtwSupport">
-        <File Id="node_etw_provider.man" Source="$(var.RepoDir)\src\res\node_etw_provider.man">
-          <util:EventManifest MessageFile="[INSTALLDIR]node.exe" ResourceFile="[INSTALLDIR]node.exe"/>
-        </File>
+      <Component Id="NodeVarsScript" Guid="2e150d25-cc98-4a2a-8c30-adf9578f8b6d">
+        <RegistryValue Root="HKCU"
+                       Key="$(var.RegistryKeyPath)"
+                       Name="InstallFolderNodeVarsScript"
+                       Type="string"
+                       Value="[INSTALLFOLDER]"
+                       KeyPath="yes" />
+        <File Id="nodevars.bat" Source="$(var.RepoDir)\tools\msvs\nodevars.bat"/>
       </Component>
-      <?endif?>
     </DirectoryRef>
 
     <DirectoryRef Id="ApplicationProgramsFolder">
@@ -190,82 +132,30 @@
                        Value="1"
                        KeyPath="yes"/>
         <Shortcut Id="NodeVarsScriptShortcut"
-                  Name="Node.js command prompt"
+                  Name="$(var.ProductName) command prompt"
                   Target="[%ComSpec]"
                   Arguments='/k "[INSTALLDIR]nodevars.bat"'
                   Show="normal"
                   WorkingDirectory="INSTALLDIR"/>
         <Shortcut Id="NodeExecutableShortcut"
-                  Name="Node.js"
-                  Target="[INSTALLDIR]node.exe"
+                  Name="$(var.ProductName)"
+                  Target="[INSTALLDIR]<%= @package_json['name'] %>.exe"
                   WorkingDirectory="INSTALLDIR"/>
         <Shortcut Id="UninstallProduct"
-                  Name="Uninstall Node.js"
+                  Name="Uninstall $(var.ProductName)"
                   Target="[SystemFolder]msiexec.exe"
                   Arguments="/x [ProductCode]"/>
+        <RemoveFolder Id="RemoveINSTALLDIR"
+                      Directory="INSTALLDIR"
+                      On="uninstall"/>
         <RemoveFolder Id="RemoveApplicationProgramsFolder"
                       On="uninstall"/>
       </Component>
     </DirectoryRef>
 
-    <DirectoryRef Id="INSTALLDIR">
-      <Component Id="NpmCmdScript">
-        <File Id="npm.cmd" KeyPath="yes" Source="$(var.NpmSourceDir)\bin\npm.cmd"/>
-      </Component>
-
-      <Component Id="NpmBashScript">
-        <File Id="npm.sh" KeyPath="yes" Source="$(var.NpmSourceDir)\bin\npm"/>
-      </Component>
-
-      <Component Id="NpxCmdScript">
-        <File Id="npx.cmd" KeyPath="yes" Source="$(var.NpmSourceDir)\bin\npx.cmd"/>
-      </Component>
-
-      <Component Id="NpxBashScript">
-        <File Id="npx.sh" KeyPath="yes" Source="$(var.NpmSourceDir)\bin\npx"/>
-      </Component>
-
-      <Directory Id="NodeModulesFolder" Name="node_modules">
-        <Directory Id="NpmFolder" Name="npm">
-          <Component Id="NpmConfigurationFile">
-            <File Id="npm.rc" KeyPath="yes" Source="$(var.RepoDir)\tools\msvs\npm\npmrc"/>
-          </Component>
-        </Directory>
-      </Directory>
-
-      <Directory Id="AppDataFolder">
-        <Directory Id="AppDataDir" Name="npm">
-          <Component Id="AppData" Guid="D3B35D0E-D0F9-4D11-A773-D4608E90E1D1">
-            <CreateFolder />
-            <RemoveFolder Id="AppDataDir" On="uninstall" />
-            <RegistryValue Root="HKCU" Key="$(var.RegistryKeyPath)\Components" Type="string" Value="" />
-          </Component>
-        </Directory>
-      </Directory>
-    </DirectoryRef>
-
-    <DirectoryRef Id="ApplicationProgramsFolder">
-      <Component Id="DocumentationShortcuts">
-        <RegistryValue Root="HKCU"
-                       Key="$(var.RegistryKeyPath)\Components"
-                       Name="DocumentationShortcuts"
-                       Type="integer"
-                       Value="1"
-                       KeyPath="yes"/>
-        <util:InternetShortcut Id="WebsiteShortcut"
-                               Name="Node.js website"
-                               Target="http://nodejs.org"
-                               Type="url"/>
-        <util:InternetShortcut Id="DocsShortcut"
-                               Name="Node.js documentation"
-                               Target="https://nodejs.org/download/$(var.DistTypeDir)/v$(var.FullVersion)/docs/api/"
-                               Type="url"/>
-      </Component>
-    </DirectoryRef>
-
     <DirectoryRef Id="INSTALLDIR">
       <Component Id="EnvironmentPathNode">
-        <RegistryValue Root="HKLM"
+        <RegistryValue Root="HKCU"
                        Key="$(var.RegistryKeyPath)\Components"
                        Name="EnvironmentPathNode"
                        Type="integer"
@@ -278,21 +168,6 @@
                      System="yes"
                      Value="[INSTALLDIR]"/>
       </Component>
-
-      <Component Id="EnvironmentPathNpmModules">
-        <RegistryValue Root="HKCU"
-                       Key="$(var.RegistryKeyPath)\Components"
-                       Name="EnvironmentPathNpmModules"
-                       Type="integer"
-                       Value="1"
-                       KeyPath="yes"/>
-        <Environment Id="EnvironmentPathNpmModules"
-                     Action="set"
-                     Name="PATH"
-                     Part="last"
-                     System="no"
-                     Value="[AppDataFolder]npm"/>
-      </Component>
     </DirectoryRef>
 
     <Binary Id='CustomActionsDLL'
@@ -336,16 +211,13 @@
       <DialogRef Id="ResumeDlg"/>
       <DialogRef Id="UserExit"/>
       <DialogRef Id="WelcomeDlg"/>
-      <DialogRef Id="LicenseAgreementDlg"/>
       <DialogRef Id="InstallDirDlg"/>
       <DialogRef Id="BrowseDlg"/>
       <DialogRef Id="InvalidDirDlg"/>
 
-      <Publish Dialog="WelcomeDlg" Control="Next" Event="NewDialog" Value="LicenseAgreementDlg">NOT Installed</Publish>
+      <Publish Dialog="WelcomeDlg" Control="Next" Event="NewDialog" Value="InstallDirDlg">NOT Installed</Publish>
       <Publish Dialog="WelcomeDlg" Control="Next" Event="NewDialog" Value="VerifyReadyDlg">Installed AND PATCH</Publish>
-      <Publish Dialog="LicenseAgreementDlg" Control="Back" Event="NewDialog" Value="WelcomeDlg">1</Publish>
-      <Publish Dialog="LicenseAgreementDlg" Control="Next" Event="NewDialog" Value="InstallDirDlg">LicenseAccepted = "1"</Publish>
-      <Publish Dialog="InstallDirDlg" Control="Back" Event="NewDialog" Value="LicenseAgreementDlg">1</Publish>
+      <Publish Dialog="InstallDirDlg" Control="Back" Event="NewDialog" Value="WelcomeDlg">1</Publish>
       <Publish Dialog="InstallDirDlg" Control="Next" Event="NewDialog" Value="CustomizeDlg" Order="20">1</Publish>
       <Publish Dialog="InstallDirDlg" Control="Next" Event="SetTargetPath" Value="[WIXUI_INSTALLDIR]" Order="10">1</Publish>
       <Publish Dialog="InstallDirDlg" Control="ChangeFolder" Property="_BrowseProperty" Value="[WIXUI_INSTALLDIR]" Order="10">1</Publish>
@@ -370,7 +242,6 @@
     <UIRef Id="WixUI_ErrorProgressText"/>
     <WixVariable Id="WixUIBannerBmp" Value="..\..\..\doc\thin-white-stripe.jpg"/>
     <WixVariable Id="WixUIDialogBmp" Value="..\..\..\doc\full-white-stripe.jpg"/>
-    <WixVariable Id="WixUILicenseRtf" Value="$(var.SourceDir)\LICENSE.rtf"/>
   </Product>
 
-</Wix>
+</Wix>
\ No newline at end of file
diff --git a/tools/msvs/nodevars.bat b/tools/msvs/nodevars.bat
index c94c446097..a8ab142caf 100644
--- a/tools/msvs/nodevars.bat
+++ b/tools/msvs/nodevars.bat
@@ -1,24 +1,9 @@
 @echo off
 
 rem Ensure this Node.js and npm are first in the PATH
-set "PATH=%APPDATA%\npm;%~dp0;%PATH%"
+set "PATH=%~dp0;%PATH%"
 
-setlocal enabledelayedexpansion
-pushd "%~dp0"
-
-rem Figure out the Node.js version.
-set print_version=.\node.exe -p -e "process.versions.node + ' (' + process.arch + ')'"
-for /F "usebackq delims=" %%v in (`%print_version%`) do set version=%%v
-
-rem Print message.
-if exist npm.cmd (
-  echo Your environment has been set up for using Node.js !version! and npm.
-) else (
-  echo Your environment has been set up for using Node.js !version!.
-)
-
-popd
-endlocal
+echo Your environment has been set up.
 
 rem If we're in the Node.js directory, change to the user's home dir.
 if "%CD%\"=="%~dp0" cd /d "%HOMEDRIVE%%HOMEPATH%"
diff --git a/tools/osx-pkg.pmdoc/01local.xml b/tools/osx-pkg.pmdoc/01local.xml
index 537b35508b..d04928a5b4 100644
--- a/tools/osx-pkg.pmdoc/01local.xml
+++ b/tools/osx-pkg.pmdoc/01local.xml
@@ -1,7 +1,7 @@
-<pkgref spec="1.12" uuid="053587FE-BDF3-4EF5-815D-281427431048">
+<pkgref spec="1.12" uuid="<%= SecureRandom.uuid.upcase %>">
   <config>
-    <identifier>org.nodejs.node.pkg</identifier>
-    <version>1.0</version>
+    <identifier><%= @osx_pkg_id %></identifier>
+    <version><%= @package_json['version'] %></version>
     <description></description>
     <post-install type="none"/>
     <requireAuthorization/>
